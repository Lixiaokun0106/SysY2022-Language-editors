// Generated from SysY2022E.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export class SysY2022ELexer extends Lexer {
	public static readonly INT = 1;
	public static readonly FLOAT = 2;
	public static readonly VOID = 3;
	public static readonly CONST = 4;
	public static readonly RETURN = 5;
	public static readonly IF = 6;
	public static readonly ELSE = 7;
	public static readonly WHILE = 8;
	public static readonly BREAK = 9;
	public static readonly CONTINUE = 10;
	public static readonly FOR = 11;
	public static readonly LP = 12;
	public static readonly RP = 13;
	public static readonly LB = 14;
	public static readonly RB = 15;
	public static readonly LC = 16;
	public static readonly RC = 17;
	public static readonly COMMA = 18;
	public static readonly SEMICOLON = 19;
	public static readonly QUESTION = 20;
	public static readonly COLON = 21;
	public static readonly MINUS = 22;
	public static readonly NOT = 23;
	public static readonly ASSIGN = 24;
	public static readonly ADD = 25;
	public static readonly MUL = 26;
	public static readonly DIV = 27;
	public static readonly MOD = 28;
	public static readonly AND = 29;
	public static readonly OR = 30;
	public static readonly EQ = 31;
	public static readonly NEQ = 32;
	public static readonly LT = 33;
	public static readonly LE = 34;
	public static readonly GT = 35;
	public static readonly GE = 36;
	public static readonly INT_LIT = 37;
	public static readonly FLOAT_LIT = 38;
	public static readonly ID = 39;
	public static readonly STRING = 40;
	public static readonly WS = 41;
	public static readonly LINE_COMMENT = 42;
	public static readonly BLOCK_COMMENT = 43;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'int'", 
                                                            "'float'", "'void'", 
                                                            "'const'", "'return'", 
                                                            "'if'", "'else'", 
                                                            "'while'", "'break'", 
                                                            "'continue'", 
                                                            "'for'", "'('", 
                                                            "')'", "'['", 
                                                            "']'", "'{'", 
                                                            "'}'", "','", 
                                                            "';'", "'?'", 
                                                            "':'", "'-'", 
                                                            "'!'", "'='", 
                                                            "'+'", "'*'", 
                                                            "'/'", "'%'", 
                                                            "'&&'", "'||'", 
                                                            "'=='", "'!='", 
                                                            "'<'", "'<='", 
                                                            "'>'", "'>='" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "INT", 
                                                             "FLOAT", "VOID", 
                                                             "CONST", "RETURN", 
                                                             "IF", "ELSE", 
                                                             "WHILE", "BREAK", 
                                                             "CONTINUE", 
                                                             "FOR", "LP", 
                                                             "RP", "LB", 
                                                             "RB", "LC", 
                                                             "RC", "COMMA", 
                                                             "SEMICOLON", 
                                                             "QUESTION", 
                                                             "COLON", "MINUS", 
                                                             "NOT", "ASSIGN", 
                                                             "ADD", "MUL", 
                                                             "DIV", "MOD", 
                                                             "AND", "OR", 
                                                             "EQ", "NEQ", 
                                                             "LT", "LE", 
                                                             "GT", "GE", 
                                                             "INT_LIT", 
                                                             "FLOAT_LIT", 
                                                             "ID", "STRING", 
                                                             "WS", "LINE_COMMENT", 
                                                             "BLOCK_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"INT", "FLOAT", "VOID", "CONST", "RETURN", "IF", "ELSE", "WHILE", "BREAK", 
		"CONTINUE", "FOR", "LP", "RP", "LB", "RB", "LC", "RC", "COMMA", "SEMICOLON", 
		"QUESTION", "COLON", "MINUS", "NOT", "ASSIGN", "ADD", "MUL", "DIV", "MOD", 
		"AND", "OR", "EQ", "NEQ", "LT", "LE", "GT", "GE", "INT_LIT", "FLOAT_LIT", 
		"EXP", "ID", "STRING", "ESC", "WS", "LINE_COMMENT", "BLOCK_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, SysY2022ELexer._ATN, SysY2022ELexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "SysY2022E.g4"; }

	public get literalNames(): (string | null)[] { return SysY2022ELexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return SysY2022ELexer.symbolicNames; }
	public get ruleNames(): string[] { return SysY2022ELexer.ruleNames; }

	public get serializedATN(): number[] { return SysY2022ELexer._serializedATN; }

	public get channelNames(): string[] { return SysY2022ELexer.channelNames; }

	public get modeNames(): string[] { return SysY2022ELexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,43,311,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
	0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
	3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
	7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
	9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
	1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
	22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
	1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,
	34,1,35,1,35,1,35,1,36,4,36,210,8,36,11,36,12,36,211,1,37,4,37,215,8,37,
	11,37,12,37,216,1,37,1,37,5,37,221,8,37,10,37,12,37,224,9,37,1,37,3,37,
	227,8,37,1,37,1,37,4,37,231,8,37,11,37,12,37,232,1,37,3,37,236,8,37,1,37,
	4,37,239,8,37,11,37,12,37,240,1,37,3,37,244,8,37,1,38,1,38,3,38,248,8,38,
	1,38,4,38,251,8,38,11,38,12,38,252,1,39,1,39,5,39,257,8,39,10,39,12,39,
	260,9,39,1,40,1,40,1,40,5,40,265,8,40,10,40,12,40,268,9,40,1,40,1,40,1,
	41,1,41,1,41,1,41,3,41,276,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
	5,43,286,8,43,10,43,12,43,289,9,43,1,43,3,43,292,8,43,1,43,1,43,1,43,1,
	43,1,44,1,44,1,44,1,44,5,44,302,8,44,10,44,12,44,305,9,44,1,44,1,44,1,44,
	1,44,1,44,3,266,287,303,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
	34,69,35,71,36,73,37,75,38,77,0,79,39,81,40,83,0,85,41,87,42,89,43,1,0,
	6,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,
	0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,326,0,1,1,0,0,0,0,3,1,0,
	0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
	0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
	0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,85,
	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,95,1,0,0,0,5,101,1,0,0,
	0,7,106,1,0,0,0,9,112,1,0,0,0,11,119,1,0,0,0,13,122,1,0,0,0,15,127,1,0,
	0,0,17,133,1,0,0,0,19,139,1,0,0,0,21,148,1,0,0,0,23,152,1,0,0,0,25,154,
	1,0,0,0,27,156,1,0,0,0,29,158,1,0,0,0,31,160,1,0,0,0,33,162,1,0,0,0,35,
	164,1,0,0,0,37,166,1,0,0,0,39,168,1,0,0,0,41,170,1,0,0,0,43,172,1,0,0,0,
	45,174,1,0,0,0,47,176,1,0,0,0,49,178,1,0,0,0,51,180,1,0,0,0,53,182,1,0,
	0,0,55,184,1,0,0,0,57,186,1,0,0,0,59,189,1,0,0,0,61,192,1,0,0,0,63,195,
	1,0,0,0,65,198,1,0,0,0,67,200,1,0,0,0,69,203,1,0,0,0,71,205,1,0,0,0,73,
	209,1,0,0,0,75,243,1,0,0,0,77,245,1,0,0,0,79,254,1,0,0,0,81,261,1,0,0,0,
	83,275,1,0,0,0,85,277,1,0,0,0,87,281,1,0,0,0,89,297,1,0,0,0,91,92,5,105,
	0,0,92,93,5,110,0,0,93,94,5,116,0,0,94,2,1,0,0,0,95,96,5,102,0,0,96,97,
	5,108,0,0,97,98,5,111,0,0,98,99,5,97,0,0,99,100,5,116,0,0,100,4,1,0,0,0,
	101,102,5,118,0,0,102,103,5,111,0,0,103,104,5,105,0,0,104,105,5,100,0,0,
	105,6,1,0,0,0,106,107,5,99,0,0,107,108,5,111,0,0,108,109,5,110,0,0,109,
	110,5,115,0,0,110,111,5,116,0,0,111,8,1,0,0,0,112,113,5,114,0,0,113,114,
	5,101,0,0,114,115,5,116,0,0,115,116,5,117,0,0,116,117,5,114,0,0,117,118,
	5,110,0,0,118,10,1,0,0,0,119,120,5,105,0,0,120,121,5,102,0,0,121,12,1,0,
	0,0,122,123,5,101,0,0,123,124,5,108,0,0,124,125,5,115,0,0,125,126,5,101,
	0,0,126,14,1,0,0,0,127,128,5,119,0,0,128,129,5,104,0,0,129,130,5,105,0,
	0,130,131,5,108,0,0,131,132,5,101,0,0,132,16,1,0,0,0,133,134,5,98,0,0,134,
	135,5,114,0,0,135,136,5,101,0,0,136,137,5,97,0,0,137,138,5,107,0,0,138,
	18,1,0,0,0,139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,110,0,0,142,143,
	5,116,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,117,0,0,146,147,
	5,101,0,0,147,20,1,0,0,0,148,149,5,102,0,0,149,150,5,111,0,0,150,151,5,
	114,0,0,151,22,1,0,0,0,152,153,5,40,0,0,153,24,1,0,0,0,154,155,5,41,0,0,
	155,26,1,0,0,0,156,157,5,91,0,0,157,28,1,0,0,0,158,159,5,93,0,0,159,30,
	1,0,0,0,160,161,5,123,0,0,161,32,1,0,0,0,162,163,5,125,0,0,163,34,1,0,0,
	0,164,165,5,44,0,0,165,36,1,0,0,0,166,167,5,59,0,0,167,38,1,0,0,0,168,169,
	5,63,0,0,169,40,1,0,0,0,170,171,5,58,0,0,171,42,1,0,0,0,172,173,5,45,0,
	0,173,44,1,0,0,0,174,175,5,33,0,0,175,46,1,0,0,0,176,177,5,61,0,0,177,48,
	1,0,0,0,178,179,5,43,0,0,179,50,1,0,0,0,180,181,5,42,0,0,181,52,1,0,0,0,
	182,183,5,47,0,0,183,54,1,0,0,0,184,185,5,37,0,0,185,56,1,0,0,0,186,187,
	5,38,0,0,187,188,5,38,0,0,188,58,1,0,0,0,189,190,5,124,0,0,190,191,5,124,
	0,0,191,60,1,0,0,0,192,193,5,61,0,0,193,194,5,61,0,0,194,62,1,0,0,0,195,
	196,5,33,0,0,196,197,5,61,0,0,197,64,1,0,0,0,198,199,5,60,0,0,199,66,1,
	0,0,0,200,201,5,60,0,0,201,202,5,61,0,0,202,68,1,0,0,0,203,204,5,62,0,0,
	204,70,1,0,0,0,205,206,5,62,0,0,206,207,5,61,0,0,207,72,1,0,0,0,208,210,
	7,0,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,
	212,74,1,0,0,0,213,215,7,0,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,
	1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,222,5,46,0,0,219,221,7,0,0,
	0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,226,
	1,0,0,0,224,222,1,0,0,0,225,227,3,77,38,0,226,225,1,0,0,0,226,227,1,0,0,
	0,227,244,1,0,0,0,228,230,5,46,0,0,229,231,7,0,0,0,230,229,1,0,0,0,231,
	232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,236,3,77,
	38,0,235,234,1,0,0,0,235,236,1,0,0,0,236,244,1,0,0,0,237,239,7,0,0,0,238,
	237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,242,1,0,
	0,0,242,244,3,77,38,0,243,214,1,0,0,0,243,228,1,0,0,0,243,238,1,0,0,0,244,
	76,1,0,0,0,245,247,7,1,0,0,246,248,7,2,0,0,247,246,1,0,0,0,247,248,1,0,
	0,0,248,250,1,0,0,0,249,251,7,0,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,
	250,1,0,0,0,252,253,1,0,0,0,253,78,1,0,0,0,254,258,7,3,0,0,255,257,7,4,
	0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
	80,1,0,0,0,260,258,1,0,0,0,261,266,5,34,0,0,262,265,3,83,41,0,263,265,9,
	0,0,0,264,262,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,267,1,0,0,0,266,
	264,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,34,0,0,270,82,1,0,
	0,0,271,272,5,92,0,0,272,276,5,34,0,0,273,274,5,92,0,0,274,276,5,92,0,0,
	275,271,1,0,0,0,275,273,1,0,0,0,276,84,1,0,0,0,277,278,7,5,0,0,278,279,
	1,0,0,0,279,280,6,42,0,0,280,86,1,0,0,0,281,282,5,47,0,0,282,283,5,47,0,
	0,283,287,1,0,0,0,284,286,9,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,288,
	1,0,0,0,287,285,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,290,292,5,13,0,
	0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,5,10,0,0,294,
	295,1,0,0,0,295,296,6,43,0,0,296,88,1,0,0,0,297,298,5,47,0,0,298,299,5,
	42,0,0,299,303,1,0,0,0,300,302,9,0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,
	303,304,1,0,0,0,303,301,1,0,0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,307,
	5,42,0,0,307,308,5,47,0,0,308,309,1,0,0,0,309,310,6,44,0,0,310,90,1,0,0,
	0,18,0,211,216,222,226,232,235,240,243,247,252,258,264,266,275,287,291,
	303,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SysY2022ELexer.__ATN) {
			SysY2022ELexer.__ATN = new ATNDeserializer().deserialize(SysY2022ELexer._serializedATN);
		}

		return SysY2022ELexer.__ATN;
	}


	static DecisionsToDFA = SysY2022ELexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}